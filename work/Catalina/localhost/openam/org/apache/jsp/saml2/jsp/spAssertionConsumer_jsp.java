/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.36
 * Generated at: 2020-06-18 10:41:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.saml2.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.sun.identity.federation.common.FSUtils;
import com.sun.identity.saml.common.SAMLUtils;
import com.sun.identity.saml2.common.SAML2Constants;
import com.sun.identity.saml2.common.SAML2Exception;
import com.sun.identity.saml2.common.InvalidStatusCodeSaml2Exception;
import com.sun.identity.saml2.common.SAML2Utils;
import com.sun.identity.saml2.logging.LogUtil;
import com.sun.identity.saml2.meta.SAML2MetaException;
import com.sun.identity.saml2.meta.SAML2MetaManager;
import com.sun.identity.saml2.meta.SAML2MetaUtils;
import com.sun.identity.saml2.profile.ResponseInfo;
import com.sun.identity.saml2.profile.SPACSUtils;
import com.sun.identity.saml2.profile.IDPProxyUtil;
import com.sun.identity.saml2.protocol.Response;
import com.sun.identity.plugin.session.SessionManager;
import com.sun.identity.plugin.session.SessionProvider;
import com.sun.identity.plugin.session.SessionException;
import java.util.logging.Level;
import org.forgerock.guice.core.InjectorHolder;
import org.forgerock.http.util.Uris;
import org.forgerock.openam.audit.AuditEventPublisher;
import org.forgerock.openam.saml2.audit.SAML2Auditor;
import org.forgerock.openam.audit.AuditEventFactory;
import java.io.PrintWriter;

public final class spAssertionConsumer_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    private String getLocalLoginUrl(
                                String orgName,
                                String hostEntityId,
                                SAML2MetaManager metaManager,
                                ResponseInfo respInfo,
                                String requestURL,
                                String relayState)
    {
        String localLoginUrl = SPACSUtils.prepareForLocalLogin(
                orgName, hostEntityId, metaManager, respInfo, requestURL);
        if (localLoginUrl.indexOf("?") == -1) {
            localLoginUrl += "?goto=";
        } else {
            localLoginUrl += "&goto=";
        }
        String gotoURL = requestURL + "?resID="
                        + Uris.urlEncodeQueryParameterNameOrValue(respInfo.getResponse().getID());
        if (relayState != null && relayState.length() != 0) {
                gotoURL += "&RelayState=" + Uris.urlEncodeQueryParameterNameOrValue(relayState);
        }
        localLoginUrl += Uris.urlEncodeQueryParameterNameOrValue(gotoURL);
        if (SAML2Utils.debug.messageEnabled()) {
            SAML2Utils.debug.message("spAssertionConsumer.jsp: local login "
                        + "url=" + localLoginUrl);
        }
        return localLoginUrl;
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("com.sun.identity.saml2.common.SAML2Constants");
    _jspx_imports_classes.add("com.sun.identity.saml2.logging.LogUtil");
    _jspx_imports_classes.add("org.forgerock.guice.core.InjectorHolder");
    _jspx_imports_classes.add("org.forgerock.openam.audit.AuditEventFactory");
    _jspx_imports_classes.add("org.forgerock.openam.saml2.audit.SAML2Auditor");
    _jspx_imports_classes.add("com.sun.identity.saml.common.SAMLUtils");
    _jspx_imports_classes.add("com.sun.identity.saml2.profile.IDPProxyUtil");
    _jspx_imports_classes.add("com.sun.identity.plugin.session.SessionProvider");
    _jspx_imports_classes.add("com.sun.identity.saml2.meta.SAML2MetaManager");
    _jspx_imports_classes.add("org.forgerock.http.util.Uris");
    _jspx_imports_classes.add("com.sun.identity.saml2.common.SAML2Utils");
    _jspx_imports_classes.add("org.forgerock.openam.audit.AuditEventPublisher");
    _jspx_imports_classes.add("com.sun.identity.federation.common.FSUtils");
    _jspx_imports_classes.add("com.sun.identity.saml2.profile.SPACSUtils");
    _jspx_imports_classes.add("java.util.logging.Level");
    _jspx_imports_classes.add("com.sun.identity.saml2.profile.ResponseInfo");
    _jspx_imports_classes.add("com.sun.identity.plugin.session.SessionException");
    _jspx_imports_classes.add("com.sun.identity.saml2.meta.SAML2MetaUtils");
    _jspx_imports_classes.add("com.sun.identity.saml2.common.InvalidStatusCodeSaml2Exception");
    _jspx_imports_classes.add("com.sun.identity.saml2.meta.SAML2MetaException");
    _jspx_imports_classes.add("com.sun.identity.saml2.common.SAML2Exception");
    _jspx_imports_classes.add("com.sun.identity.saml2.protocol.Response");
    _jspx_imports_classes.add("com.sun.identity.plugin.session.SessionManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>SP Assertion Consumer Service</title>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<body>\n");

    // set up audit logger and attach initial information
    AuditEventPublisher aep = InjectorHolder.getInstance(AuditEventPublisher.class);
    AuditEventFactory aef = InjectorHolder.getInstance(AuditEventFactory.class);
    SAML2Auditor saml2Auditor = new SAML2Auditor(aep, aef, request);
    saml2Auditor.setMethod("spAssertionConsumer");
    saml2Auditor.setSessionTrackingId(session.getId());
    saml2Auditor.auditAccessAttempt();

    // check request, response, content length
    if ((request == null) || (response == null)) {
        SAMLUtils.sendError(request, response, response.SC_BAD_REQUEST,
            "nullInput", SAML2Utils.bundle.getString("nullInput"));
        saml2Auditor.auditAccessFailure(String.valueOf(response.SC_BAD_REQUEST),
                SAML2Utils.bundle.getString("nullInput"));
        return;
    }
    // to avoid dos attack
    // or use SAML2Utils?
    try {
        SAMLUtils.checkHTTPContentLength(request);
    } catch (ServletException se) {
        SAMLUtils.sendError(request, response, response.SC_BAD_REQUEST, 
            "largeContentLength", se.getMessage());
        saml2Auditor.auditAccessFailure(String.valueOf(response.SC_BAD_REQUEST),
                se.getMessage());
        return;
    }

    if (FSUtils.needSetLBCookieAndRedirect(request, response, false)) {
        saml2Auditor.auditForwardToProxy();
        return;
    }

    String requestURL = request.getRequestURL().toString();
    // get entity id and realm
    String metaAlias = SAML2MetaUtils.getMetaAliasByUri(requestURL);
    String realm = SAML2MetaUtils.getRealmByMetaAlias(metaAlias);
    if (realm == null || realm.length() == 0) {
        realm = "/";
    }
    saml2Auditor.setRealm(realm);

    SAML2MetaManager metaManager = SAML2Utils.getSAML2MetaManager();
    if (metaManager == null) {
        // logging?
        SAMLUtils.sendError(request, response, 
            response.SC_INTERNAL_SERVER_ERROR, "errorMetaManager",
            SAML2Utils.bundle.getString("errorMetaManager"));
        saml2Auditor.auditAccessFailure(String.valueOf(response.SC_BAD_REQUEST),
                SAML2Utils.bundle.getString("errorMetaManager"));
        return;
    }
    String hostEntityId = null;
    try {
        hostEntityId = metaManager.getEntityByMetaAlias(metaAlias);
    } catch (SAML2MetaException sme) {
        // logging?
        SAMLUtils.sendError(request, response, 
            response.SC_INTERNAL_SERVER_ERROR, "metaDataError", 
            SAML2Utils.bundle.getString("metaDataError"));
        saml2Auditor.auditAccessFailure(String.valueOf(response.SC_INTERNAL_SERVER_ERROR),
                SAML2Utils.bundle.getString("metaDataError"));
        return;
    }
    if (hostEntityId == null) {
        // logging?
        SAMLUtils.sendError(request, response, 
            response.SC_INTERNAL_SERVER_ERROR, "metaDataError",
            SAML2Utils.bundle.getString("metaDataError"));
        saml2Auditor.auditAccessFailure(String.valueOf(response.SC_INTERNAL_SERVER_ERROR),
                SAML2Utils.bundle.getString("metaDataError"));
        return;
    }
    String relayState = request.getParameter(SAML2Constants.RELAY_STATE);

    // federate flag
    String federate = request.getParameter(SAML2Constants.FEDERATE);
    SessionProvider sessionProvider = null;
    ResponseInfo respInfo = null; 
    try {
        sessionProvider = SessionManager.getProvider();
    } catch (SessionException se) {
        SAMLUtils.sendError(request, response, 
            response.SC_INTERNAL_SERVER_ERROR, "nullSessionProvider",
            se.getMessage());
        saml2Auditor.auditAccessFailure(se.getErrorCode(), se.getLocalizedMessage());
        return;
    }
    try {
        respInfo = SPACSUtils.getResponse(
            request, response, realm, hostEntityId, metaManager);
        saml2Auditor.setRequestId(respInfo.getResponse().getInResponseTo());
    } catch (SAML2Exception se) {
        // Only do a sendError if one hasn't already been called.
        if (!response.isCommitted()) {
            SAMLUtils.sendError(request, response,
                response.SC_INTERNAL_SERVER_ERROR, "getResponseError",
                se.getMessage());
        }
        saml2Auditor.auditAccessFailure(se.getErrorCode(), se.getLocalizedMessage());
        return;
    }

    String ecpRelayState = respInfo.getRelayState();
    if ((ecpRelayState != null) && (ecpRelayState.length() > 0)) {
        relayState = ecpRelayState;
    }

    Object token = null;
    try {
        token = sessionProvider.getSession(request);
        saml2Auditor.setAuthTokenId(token);

    } catch (SessionException se) {
        if (SAML2Utils.debug.messageEnabled()) {
            SAML2Utils.debug.message(
                "spAssertionConsumer.jsp: Token is null." +
                se.getMessage());
        }
        token = null;
    }
    if (federate != null && federate.trim().equals("true") &&
        token == null) {
        if (SAML2Utils.debug.messageEnabled()) {
            SAML2Utils.debug.message("spAssertionConsumer.jsp: federate "
                + "is true, and token is null. do local login first.");
        }
        FSUtils.forwardRequest(request, response,
                getLocalLoginUrl(realm, hostEntityId, metaManager, respInfo, requestURL, relayState));
        saml2Auditor.auditForwardToLocalUserLogin();
        return;
    }
    Object newSession = null;
    Response saml2Resp = respInfo.getResponse();

    String requestID = saml2Resp.getInResponseTo();
    boolean isProxyOn = IDPProxyUtil.isIDPProxyEnabled(requestID);
    try {
        newSession = SPACSUtils.processResponse( request, response, new PrintWriter(out, true), metaAlias, token,
                respInfo, realm, hostEntityId, metaManager, saml2Auditor);
        saml2Auditor.setUserId(sessionProvider.getPrincipalName(newSession));
        saml2Auditor.setSSOTokenId(newSession);

    } catch (SAML2Exception se) {
        String[] data = {hostEntityId, se.getMessage(), ""};
        if (LogUtil.isErrorLoggable(Level.FINE)) {
            data[2] = saml2Resp.toXMLString(true, true);
        }
        LogUtil.error(Level.INFO, LogUtil.SP_SSO_FAILED, data, null);
        SAML2Utils.debug.error("spAssertionConsumer.jsp: SSO failed.", se);
        if (se.isRedirectionDone()) {
            //The redirection has already happened successfully and logging auditsuccess.
            saml2Auditor.auditAccessSuccess();
            return;
        } else if (se instanceof InvalidStatusCodeSaml2Exception && isProxyOn) {
            SAML2Utils.debug.error("spAssertionConsumer.jsp: Non-Success status code in response");
            String firstlevelStatusCodeValue = ((InvalidStatusCodeSaml2Exception) se).getFirstlevelStatuscode();
            String secondlevelStatusCodeValue = ((InvalidStatusCodeSaml2Exception) se).getSecondlevelStatuscode();
            try {
                IDPProxyUtil.sendResponseWithStatus(request, response, new PrintWriter(out, true),
                        requestID, metaAlias, hostEntityId, realm, firstlevelStatusCodeValue,
                        secondlevelStatusCodeValue);
            } catch (SAML2Exception samle) {
                SAML2Utils.debug.error("Failed to send response with status ", samle);
            }
            return;
        } else {
            if (se.getMessage().equals(SAML2Utils.bundle.getString("noUserMapping"))) {
                if (SAML2Utils.debug.messageEnabled()) {
                    SAML2Utils.debug.message("spAssertionConsumer.jsp:need local login!!");
                }
                FSUtils.forwardRequest(request, response,
                        getLocalLoginUrl(realm, hostEntityId, metaManager, respInfo, requestURL, relayState));
                saml2Auditor.auditForwardToLocalUserLogin();
                return;
            }
            saml2Auditor.auditAccessFailure(String.valueOf(response.SC_INTERNAL_SERVER_ERROR),
                    SAML2Utils.bundle.getString("SSOFailed"));
            SAMLUtils.sendError(request, response, response.SC_INTERNAL_SERVER_ERROR, "SSOFailed",
                    SAML2Utils.bundle.getString("SSOFailed"));
            return;
        }
    }

    if (newSession == null) {
        if (SAML2Utils.debug.messageEnabled()) {
            SAML2Utils.debug.message("Session is null.");
            SAML2Utils.debug.message("spAssertionConsumer.jsp:Login has failed!!");
        }
        SAMLUtils.sendError(request, response, response.SC_INTERNAL_SERVER_ERROR, "SSOFailed",
                SAML2Utils.bundle.getString("SSOFailed"));
        saml2Auditor.auditAccessFailure(String.valueOf(
                response.SC_INTERNAL_SERVER_ERROR), SAML2Utils.bundle.getString("SSOFailed"));
        return;
    }
    SAML2Utils.debug.message("SSO SUCCESS");
    String[] redirected = sessionProvider.getProperty(newSession,
        SAML2Constants.RESPONSE_REDIRECTED);
    if ((redirected != null) && (redirected.length != 0) &&
        redirected[0].equals("true")) {
        SAML2Utils.debug.message("Redirection already done in SPAdapter.");
        // response redirected already in SPAdapter

        saml2Auditor.auditForwardToProxy();
        return;
    }
    if (isProxyOn) { 
        try {
            IDPProxyUtil.generateProxyResponse(request, response, new PrintWriter(out, true), metaAlias, respInfo,
                    newSession, saml2Auditor);
            saml2Auditor.auditForwardToProxy();
        } catch (SAML2Exception se) {
            SAML2Utils.debug.error("Failed sending proxy response", se);
            saml2Auditor.auditAccessFailure(se.getErrorCode(), se.getLocalizedMessage());
        }
        return;  
    } 
    // redirect to relay state
    String finalUrl = SPACSUtils.getRelayState(relayState, realm, hostEntityId, metaManager);

    String realFinalUrl = finalUrl;
    String redirectUrl = SPACSUtils.getIntermediateURL(realm, hostEntityId, metaManager);
    String realRedirectUrl = null;
    if (redirectUrl != null && redirectUrl.length() != 0) {
        if (realFinalUrl != null && realFinalUrl.length() != 0) {
            if (redirectUrl.indexOf("?") != -1) {
                redirectUrl += "&goto=";
            } else {
                redirectUrl += "?goto=";
            }
            redirectUrl += Uris.urlEncodeQueryParameterNameOrValue(realFinalUrl);
        } else {
            realRedirectUrl = redirectUrl;
        }
    } else {
        realRedirectUrl = finalUrl;
    }
    if (realRedirectUrl == null || (realRedirectUrl.trim().length() == 0)) {
        if (isProxyOn) {
            saml2Auditor.auditForwardToProxy();
            return;
        } else {
            saml2Auditor.auditAccessSuccess();
           
      out.write("\n");
      out.write("            ");
      if (true) {
        _jspx_page_context.forward("/saml2/jsp/default.jsp?message=ssoSuccess");
        return;
      }
      out.write("\n");
      out.write("          ");
 
        }  
    } else {
        // log it
	    try {
	        SAML2Utils.validateRelayStateURL(realm, hostEntityId, realRedirectUrl, SAML2Constants.SP_ROLE);
        } catch (SAML2Exception se) {
	        SAMLUtils.sendError(request, response,
                response.SC_BAD_REQUEST, "requestProcessingError",
	            SAML2Utils.bundle.getString("requestProcessingError") + " " + se.getMessage());
            saml2Auditor.auditAccessFailure(se.getErrorCode(), se.getLocalizedMessage());
            return;
        }

        saml2Auditor.auditAccessSuccess();
        response.sendRedirect(realRedirectUrl);
    }

      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
